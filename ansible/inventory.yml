---
- name: Provision Inventory databases
  hosts: inventory-web
  pre_tasks:
    # Database initialization should be delegated to the jumpbox, however
    # jumpbox does not have access to the application databases (firewall/security
    # group configuration), so we have to install dependencies on one of the
    # inventory hosts and delegate to that host instead.
    - name: install psycopg2 for postgresql ansible module
      apt: name=python-psycopg2 state=present
      run_once: true
      tags:
        - database
  roles:
    - role: gsa.datagov-deploy-postgresql
      vars:
        postgresql_database_name: "{{ inventory_db_name }}"
        postgresql_role_name: "{{ inventory_db_name }}"
        postgresql_role_password: "{{ inventory_db_pass }}"
      tags:
        - database
      run_once: true
      when: datagov_enable_postgresql_role is defined
    - role: gsa.datagov-deploy-postgresql
      vars:
        postgresql_database_name: "{{ inventory_datapusher_db_name }}"
        postgresql_role_name: "{{ inventory_datapusher_db_name }}"
        postgresql_role_password: "{{ inventory_datapusher_db_pass }}"
      tags:
        - database
      run_once: true
      when: datagov_enable_postgresql_role is defined
    - role: gsa.datagov-deploy-postgresql
      vars:
        postgresql_database_name: "{{ inventory_datastore_db_name }}"
        postgresql_role_name: "{{ inventory_datastore_db_name }}"
        postgresql_role_password: "{{ inventory_datastore_pass }}"
      tags:
        - database
      run_once: true
      when: datagov_enable_postgresql_role is defined
    - role: gsa.datagov-deploy-postgresql
      vars:
        postgresql_database_name: "{{ inventory_datastore_db_name }}"
        postgresql_role_name: "{{ inventory_datastore_ro_user }}"
        postgresql_role_password: "{{ inventory_datastore_ro_pass }}"
        postgresql_priv: SELECT
      tags:
        - database
      run_once: true
      when: datagov_enable_postgresql_role is defined


- name: Provisioning Inventory CKAN Stack
  hosts: inventory-web
  serial: 1
  vars:
    app_type: inventory

  roles:
    - {role: software/common/tls, tags: ['tls']}
    - software/ckan/common
    - {role: gsa.datagov-deploy-apache2, tags: ['apache']}
    - {role: software/ckan/inventory, tags: ['deploy']}
    - {role: software/ckan/saml2, tags: ['saml2']}

  # Host-level smoke tests
  tasks:
    - name: flush handlers
      meta: flush_handlers

    - name: assert app is up
      uri:
        url: http://{{ ansible_fqdn }}/api/action/status_show
        follow_redirects: none
        status_code: 200
        # TODO enable cert validation. Staging and production hosts have GSA
        # signed certs which should be valid.
        # https://github.com/GSA/datagov-deploy/issues/900
        validate_certs: false
      retries: 3
      delay: 10
      register: result
      until: not result.failed
      when: datagov_in_service | default(true)


- name: logrotate configuration
  hosts: inventory-web,!v2
  roles:
    - role: nickhammond.logrotate
      logrotate_scripts:
        - name: inventory
          paths:
            - /var/log/inventory/*.log
          options:
            - compress
            - copytruncate
            - weekly
            - missingok
            - rotate 8


- name: NewRelic
  hosts: inventory-web
  vars:
    newrelic_app_name: inventory
  roles:
    - monitoring/newrelic/python-agent-ansible
  tags:
    - newrelic


- name: Service-level smoke tests
  hosts: inventory-web
  tasks:
    - name: flush handlers
      meta: flush_handlers

    - name: assert inventory service is available
      uri:
        url: "{{ inventory_ckan_service_url }}/api/action/status_show"
        follow_redirects: none
        status_code: 200
        # TODO enable cert validation. Staging and production hosts have GSA
        # signed certs which should be valid.
        # https://github.com/GSA/datagov-deploy/issues/900
        validate_certs: false
        headers:
          # Avoid login redirect
          Cookie: auth_tkt=1
      run_once: true
      delegate_to: localhost
      retries: 3
      delay: 10
      register: result
      until: not result.failed
